import telebot
from telebot import types
import hmac
import hashlib
import base64
from urllib.parse import urlencode

from config import BOT_TOKEN, CHANNELS, COURSES

bot = telebot.TeleBot(BOT_TOKEN)

MERCHANT_ACCOUNT = "7de8a72b71369907282f75c00bb050e8"
MERCHANT_SECRET_KEY = "8600b023c86794b0496293e6b907aee895baa8e0"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∫—É—Ä—Å—ñ–≤
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(course['name']) for course in COURSES.values()]
    markup.add(*buttons)
    bot.send_message(chat_id, "üëã –û–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=markup)

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é –∫—É—Ä—Å—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –ö—É–ø–∏—Ç–∏, –ù–∞–∑–∞–¥
def show_course_menu(chat_id, course_id):
    course = COURSES[course_id]
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
        types.KeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏"),
        types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )
    bot.send_message(chat_id, f"üìò {course['name']}", reply_markup=markup)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ –ø–∞–º'—è—Ç—ñ)
user_state = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_state.pop(message.chat.id, None)  # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –æ–±–∏—Ä–∞—î –∫—É—Ä—Å
    for cid, course in COURSES.items():
        if text == course['name']:
            user_state[chat_id] = cid
            show_course_menu(chat_id, cid)
            return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –º–µ–Ω—é –∫—É—Ä—Å—É
    if chat_id in user_state:
        cid = user_state[chat_id]

        if text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            course = COURSES[cid]
            bot.send_message(chat_id, f"*{course['name']}*\n\n{course['description']}", parse_mode="Markdown")
        elif text == "üí≥ –ö—É–ø–∏—Ç–∏":
            course = COURSES[cid]
            if course['price'] == 0:
                handle_successful_payment(chat_id, cid)
                return

            order_ref = f"order_{chat_id}_{cid}"
            data = {
                "merchantAccount": MERCHANT_ACCOUNT,
                "merchantDomainName": "test.com",
                "orderReference": order_ref,
                "orderDate": 1699999999,
                "amount": course['price'],
                "currency": "UAH",
                "productName": [course['name']],
                "productCount": [1],
                "productPrice": [course['price']],
                "clientAccountId": str(chat_id),
                "returnUrl": "https://t.me/your_bot"
            }

            keys = [
                MERCHANT_ACCOUNT, "test.com", order_ref, "1699999999",
                str(course['price']), "UAH", course['name'], "1", str(course['price'])
            ]
            sign_str = ";".join(keys)
            sign = base64.b64encode(hmac.new(MERCHANT_SECRET_KEY.encode(), sign_str.encode(), hashlib.md5).digest()).decode()
            data['merchantSignature'] = sign

            pay_link = "https://secure.wayforpay.com/pay?" + urlencode(data, doseq=True)

            bot.send_message(chat_id,
                             f"üí≥ –©–æ–± –∫—É–ø–∏—Ç–∏ {course['name']}, —Å–ø–ª–∞—Ç–∏ {course['price']} –≥—Ä–Ω:\n{pay_link}\n\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –±–æ—Ç –≤–∏–¥–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø.")
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user_state.pop(chat_id, None)
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑ –º–µ–Ω—é –≤–Ω–∏–∑—É.")

    else:
        bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑ –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞—á—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
def handle_successful_payment(user_id, course_id):
    try:
        chat_id = CHANNELS.get(course_id)
        if not chat_id:
            bot.send_message(user_id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É.")
            return
        invite = bot.create_chat_invite_link(
            chat_id=chat_id,
            member_limit=1,
            creates_join_request=False
        )
        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\nüîó –û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{invite.invite_link}")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ –¥–æ—Å—Ç—É–ø—É:\n{e}")
        print(f"[ERROR] handle_successful_payment: {e}")

bot.polling(none_stop=True)
