import telebot
from telebot import types
import hmac
import hashlib
import base64
from urllib.parse import urlencode
import time
import os
from flask import Flask, request

# –ß–∏—Ç–∞—î–º–æ –∫–ª—é—á—ñ –∑ Environment Variables
BOT_TOKEN = os.environ['BOT_TOKEN']
MERCHANT_ACCOUNT = os.environ['MERCHANT_ACCOUNT']
MERCHANT_SECRET_KEY = os.environ['MERCHANT_SECRET_KEY']

# –£ config.py –∑–∞–ª–∏—à —Ç—ñ–ª—å–∫–∏ COURSES —ñ CHANNELS –∞–±–æ –ø–µ—Ä–µ–Ω–µ—Å–∏ —ó—Ö —Å—é–¥–∏
from config import COURSES, CHANNELS

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Render)
@app.route('/')
def home():
    return 'Bot is running!'

# Webhook –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–ø–¥–µ–π—Ç—ñ–≤ –≤—ñ–¥ Telegram
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'OK', 200

# –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
def handle_successful_payment(user_id, course_id):
    try:
        chat_id = CHANNELS.get(course_id)
        if not chat_id:
            bot.send_message(user_id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É.")
            return
        invite = bot.create_chat_invite_link(
            chat_id=chat_id,
            member_limit=1,
            creates_join_request=False
        )
        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\nüîó –û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{invite.invite_link}")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ –¥–æ—Å—Ç—É–ø—É:\n{e}")
        print(f"[ERROR] handle_successful_payment: {e}")

# –ú–µ–Ω—é –∫—É—Ä—Å—É
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(course['name']) for course in COURSES.values()]
    markup.add(*buttons)
    bot.send_message(chat_id, "üëã –û–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=markup)

def show_course_menu(chat_id, course_id):
    course = COURSES[course_id]
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
        types.KeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏"),
        types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )
    bot.send_message(chat_id, f"üìò {course['name']}", reply_markup=markup)

user_state = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_state.pop(message.chat.id, None)
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text

    for cid, course in COURSES.items():
        if text == course['name']:
            user_state[chat_id] = cid
            show_course_menu(chat_id, cid)
            return

    if chat_id in user_state:
        cid = user_state[chat_id]
        course = COURSES[cid]

        if text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            bot.send_message(chat_id, f"*{course['name']}*\n\n{course['description']}", parse_mode="Markdown")

        elif text == "üí≥ –ö—É–ø–∏—Ç–∏":
            if course['price'] == 0:
                handle_successful_payment(chat_id, cid)
                return

            order_ref = f"order_{chat_id}_{cid}"
            order_date = str(int(time.time()))
            data = {
                "merchantAccount": MERCHANT_ACCOUNT,
                "merchantDomainName": "test.com",
                "orderReference": order_ref,
                "orderDate": int(order_date),
                "amount": course['price'],
                "currency": "UAH",
                "productName": [course['name']],
                "productCount": [1],
                "productPrice": [course['price']],
                "clientAccountId": str(chat_id),
                "returnUrl": "https://t.me/your_bot"
            }

            keys = [
                MERCHANT_ACCOUNT, "test.com", order_ref, order_date,
                str(course['price']), "UAH", course['name'], "1", str(course['price'])
            ]
            sign_str = ";".join(keys)
            sign = base64.b64encode(
                hmac.new(MERCHANT_SECRET_KEY.encode(), sign_str.encode(), hashlib.md5).digest()
            ).decode()
            data['merchantSignature'] = sign

            pay_link = "https://secure.wayforpay.com/pay?" + urlencode(data, doseq=True)

            bot.send_message(chat_id,
                f"üí≥ –©–æ–± –∫—É–ø–∏—Ç–∏ {course['name']}, —Å–ø–ª–∞—Ç–∏ {course['price']} –≥—Ä–Ω:\n{pay_link}\n\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –±–æ—Ç –≤–∏–¥–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø.")

        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user_state.pop(chat_id, None)
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑ –º–µ–Ω—é –≤–Ω–∏–∑—É.")
    else:
        bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑ –º–µ–Ω—é.")

if __name__ == '__main__':
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –¥–ª—è Telegram
    bot.remove_webhook()
    bot.set_webhook(url='https://telebot-zydo.onrender.com/' + BOT_TOKEN)

    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
