import os
from flask import Flask, request
import telebot
from telebot import types
from config import BOT_TOKEN, CHANNELS, COURSES, ADMIN_CHAT_ID


# --- Flask app + TeleBot ---
app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
WEBHOOK_HOST = os.environ.get("WEBHOOK_HOST", "https://telebot-zydo.onrender.com")  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –¥–æ–º–µ–Ω Render
WEBHOOK_PATH = f"/{BOT_TOKEN}/"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

user_state = {}  # –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

# --- –ú–µ–Ω—é ---
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(course['name']) for course in COURSES.values()]
    markup.add(*buttons)
    bot.send_message(chat_id, "üëã –û–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=markup)

def show_course_menu(chat_id, course_id):
    course = COURSES[course_id]
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
        types.KeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏"),
        types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )
    bot.send_message(chat_id, f"üìò {course['name']}", reply_markup=markup)

# --- –õ–æ–≥—ñ–∫–∞ –æ–ø–ª–∞—Ç–∏ ---
def handle_successful_payment(user_id, course_id):
    try:
        chat_id = CHANNELS.get(course_id)
        if not chat_id:
            bot.send_message(user_id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É.")
            return
        invite = bot.create_chat_invite_link(
            chat_id=chat_id,
            member_limit=1,
            creates_join_request=False
        )
        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\nüîó –û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{invite.invite_link}")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ –¥–æ—Å—Ç—É–ø—É:\n{e}")
        print(f"[ERROR] handle_successful_payment: {e}")

# --- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(commands=['start'])
def start(message):
    user_state.pop(message.chat.id, None)
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text

    # –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –º–µ–Ω—é –∫—É—Ä—Å—É
    for cid, course in COURSES.items():
        if text == course['name']:
            user_state[chat_id] = cid
            show_course_menu(chat_id, cid)
            return

    # –í–∑–∞—î–º–æ–¥—ñ—è –≤ –º–µ–Ω—é –∫—É—Ä—Å—É
    if chat_id in user_state:
        cid = user_state[chat_id]
        course = COURSES[cid]

        if text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            bot.send_message(chat_id, f"*{course['name']}*\n\n{course['description']}", parse_mode="Markdown")

        elif text == "üí≥ –ö—É–ø–∏—Ç–∏":
            if course['price'] == 0:
                handle_successful_payment(chat_id, cid)
                return

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data=f"confirm_payment:{cid}"))
            bot.send_message(
                chat_id,
                f"""üí≥ –°–ø–ª–∞—Ç–∏ *{course['price']} –≥—Ä–Ω* –Ω–∞ –∫–∞—Ä—Ç—É: `4441 1144 2233 4455`

–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.""",
                parse_mode="Markdown",
                reply_markup=markup
            )

        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user_state.pop(chat_id, None)
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑ –º–µ–Ω—é.")
    else:
        bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑ –º–µ–Ω—é.")

# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_payment"))
def confirm_payment_callback(call):
    cid = call.data.split(":")[1]
    user = call.from_user
    chat_id = call.message.chat.id

    bot.send_message(
        ADMIN_CHAT_ID,
        f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user.username or '–Ω–µ–º–∞—î'}\n"
        f"ID: {user.id}\n"
        f"–ö—É—Ä—Å: {COURSES[cid]['name']}\n"
        f"–°—É–º–∞: {COURSES[cid]['price']}\n"
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏: /confirm_{user.id}_{cid}"
    )

    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    bot.send_message(chat_id, "üîÑ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10 —Ö–≤–∏–ª–∏–Ω.")

# --- Flask Webhook ---
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=['GET'])
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î", 200

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"üåê Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
