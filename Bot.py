import telebot
from telebot import types
from config import BOT_TOKEN, CHANNELS, COURSES

bot = telebot.TeleBot(BOT_TOKEN)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ –ø–∞–º'—è—Ç—ñ)
user_state = {}

ADMIN_CHAT_ID = 123456789  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID (–≤—ñ–∑—å–º–∏ —á–µ—Ä–µ–∑ @userinfobot)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∫—É—Ä—Å—ñ–≤
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(course['name']) for course in COURSES.values()]
    markup.add(*buttons)
    bot.send_message(chat_id, "üëã –û–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=markup)

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é –∫—É—Ä—Å—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –ö—É–ø–∏—Ç–∏, –ù–∞–∑–∞–¥
def show_course_menu(chat_id, course_id):
    course = COURSES[course_id]
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
        types.KeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏"),
        types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )
    bot.send_message(chat_id, f"üìò {course['name']}", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    user_state.pop(message.chat.id, None)
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text

    for cid, course in COURSES.items():
        if text == course['name']:
            user_state[chat_id] = cid
            show_course_menu(chat_id, cid)
            return

    if chat_id in user_state:
        cid = user_state[chat_id]
        course = COURSES[cid]

        if text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            bot.send_message(chat_id, f"*{course['name']}*\n\n{course['description']}", parse_mode="Markdown")

        elif text == "üí≥ –ö—É–ø–∏—Ç–∏":
            if course['price'] == 0:
                handle_successful_payment(chat_id, cid)
                return

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data=f"confirm_payment:{cid}"))
            bot.send_message(
                chat_id,
                f"üí≥ –°–ø–ª–∞—Ç–∏ *{course['price']} –≥—Ä–Ω* –Ω–∞ –∫–∞—Ä—Ç—É:`4441 1144 2233 4455`\n
–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
                parse_mode="Markdown",
                reply_markup=markup
            )

        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user_state.pop(chat_id, None)
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑ –º–µ–Ω—é.")
    else:
        bot.send_message(chat_id, "‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑ –º–µ–Ω—é.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_payment"))
def confirm_payment_callback(call):
    cid = call.data.split(":")[1]
    user = call.from_user
    chat_id = call.message.chat.id

    bot.send_message(
        ADMIN_CHAT_ID,
        f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user.username or '–Ω–µ–º–∞—î'}\nID: {user.id}\n–ö—É—Ä—Å: {COURSES[cid]['name']}\n–°—É–º–∞: {COURSES[cid]['price']}\n
–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏: /confirm_{user.id}_{cid}"
    )

    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    bot.send_message(chat_id, "üîÑ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10 —Ö–≤–∏–ª–∏–Ω.")

@bot.message_handler(commands=['confirm'])
def confirm_payment_command(message):
    parts = message.text.split("_")
    if len(parts) != 3:
        bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.")
        return

    user_id, course_id = parts[1], parts[2]
    try:
        handle_successful_payment(int(user_id), course_id)
        bot.reply_to(message, "‚úÖ –î–æ—Å—Ç—É–ø –≤–∏–¥–∞–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['revoke'])
def revoke_access(message):
    parts = message.text.split("_")
    if len(parts) != 3:
        bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /revoke_USERID_COURSEID")
        return

    user_id, course_id = parts[1], parts[2]
    try:
        bot.ban_chat_member(chat_id=CHANNELS[course_id], user_id=int(user_id))
        bot.unban_chat_member(chat_id=CHANNELS[course_id], user_id=int(user_id))
        bot.reply_to(message, f"üö´ –î–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É {course_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø—É: {e}")

# –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞—á—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
def handle_successful_payment(user_id, course_id):
    try:
        chat_id = CHANNELS.get(course_id)
        if not chat_id:
            bot.send_message(user_id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É.")
            return
        invite = bot.create_chat_invite_link(
            chat_id=chat_id,
            member_limit=1,
            creates_join_request=False
        )
        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\nüîó –û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{invite.invite_link}")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ –¥–æ—Å—Ç—É–ø—É:\n{e}")
        print(f"[ERROR] handle_successful_payment: {e}")

bot.polling(none_stop=True)
